# container
quarkus.container-image.build=true
quarkus.container-image.push=false
quarkus.container-image.group=edoardosarri
quarkus.container-image.name=reservation-service
quarkus.container-image.tag=2.0

# kubernetes
quarkus.kubernetes.name=reservation-service
quarkus.kubernetes.deployment-target=kubernetes
quarkus.kubernetes.service-type=NodePort
quarkus.kubernetes.image-pull-policy=Never

# reference
%dev.quarkus.rest-client.rental.url=http://localhost:8082
%prod.quarkus.rest-client.rental.url=http://rental-service
quarkus.http.port=8081
quarkus.http.test-port=8181

# graphql
%dev.quarkus.smallrye-graphql-client.inventory.url=http://localhost:8083/graphql
%prod.quarkus.smallrye-graphql-client.inventory.url=http://inventory-service/graphql

# db
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=user
quarkus.datasource.password=pass
%dev.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost
%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://postgresql-reservation/reservation
quarkus.hibernate-orm.database.generation=drop-and-create

# rabbitmq
mp.messaging.connector.smallrye-rabbitmq.host=rabbitmq
mp.messaging.connector.smallrye-rabbitmq.port=5672
mp.messaging.connector.smallrye-rabbitmq.username=user
mp.messaging.connector.smallrye-rabbitmq.password=pass
mp.messaging.outgoing.invoices.connector=smallrye-rabbitmq
mp.messaging.outgoing.invoices.exchange.name=invoices

# jaeger
quarkus.otel.service.name=reservation-service
quarkus.otel.exporter.otlp.endpoint=http://jaeger-collector:4317
quarkus.otel.traces.sampler=always_on

# health
quarkus.kubernetes.startup-probe.failure-threshold=1
quarkus.datasource.jdbc.url=jdbc:postgresql://postgresql-reservation:5432/reservation

# prometheus and grafana
quarkus.kubernetes.prometheus.generate-service-monitor=true
quarkus.kubernetes.labels.release=prometheus