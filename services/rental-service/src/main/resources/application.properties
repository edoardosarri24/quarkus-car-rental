quarkus.http.port=8082

# container
quarkus.container-image.build=true
quarkus.container-image.push=false
quarkus.container-image.group=edoardosarri
quarkus.container-image.name=rental-service
quarkus.container-image.tag=1.1

# kubernetes
quarkus.kubernetes.name=rental-service
quarkus.kubernetes.deployment-target=kubernetes
quarkus.kubernetes.service-type=NodePort
quarkus.kubernetes.image-pull-policy=Never
quarkus.kubernetes.prometheus.generate-service-monitor=false

# reference
quarkus.rest-client.reservation.url=http://localhost:8081
quarkus.kubernetes.env.vars.quarkus-rest-client-reservation-url=http://reservation-service

# db
%prod.quarkus.mongodb.connection-string=mongodb://mongo:27017
quarkus.kubernetes.env.vars.quarkus-mongodb-connection-string=mongodb://root:password@mongodb-rental:27017
quarkus.mongodb.database=rental-test

# kafka
%prod.kafka.bootstrap.servers=localhost:9092
quarkus.kubernetes.env.vars.kafka-bootstrap-servers=kafka:9092
mp.messaging.incoming.invoices-confirmations.connector=smallrye-kafka

# jaeger
quarkus.kubernetes.env.vars.otel-service-name=rental-service
quarkus.otel.resource.attributes=service.name=rental-service
quarkus.kubernetes.env.vars.otel-exporter-otlp-endpoint=http://jaeger-collector:4317
quarkus.otel.exporter.otlp.endpoint=http://jaeger-collector:4317
quarkus.otel.traces.sampler=always_on
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

# prometheus and grafana
quarkus.kubernetes.prometheus.generate-service-monitor=true
quarkus.kubernetes.labels.release=prometheus