quarkus.http.port=8081
quarkus.http.test-port=8181

# container
quarkus.container-image.build=true
quarkus.container-image.push=false
quarkus.container-image.group=edoardosarri
quarkus.container-image.name=reservation-service
quarkus.container-image.tag=1.1

# kubernetes
quarkus.kubernetes.name=reservation-service
quarkus.kubernetes.deployment-target=kubernetes
quarkus.kubernetes.service-type=NodePort
quarkus.kubernetes.image-pull-policy=IfNotPresent
quarkus.kubernetes.prometheus.generate-service-monitor=false

# graphql
quarkus.smallrye-graphql-client.inventory.url=http://localhost:8083/graphql
quarkus.kubernetes.env.vars.quarkus-smallrye-graphql-client-inventory-url=http://inventory-service/graphql

# db
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=user
quarkus.datasource.password=pass
quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/reservation
%prod.quarkus.datasource.username=user
%prod.quarkus.datasource.password=pass
%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://postgresql-reservation:5432/reservation
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.kubernetes.env.vars.quarkus-datasource-reactive-url=vertx-reactive:postgresql://postgresql-reservation:5432/reservation

# link
quarkus.rest-client.rental.url=http://localhost:8082
quarkus.kubernetes.env.vars.quarkus-rest-client-rental-url=http://rental-service

# rabbitmq
quarkus.kubernetes.env.vars.rabbitmq-host=rabbitmq-reservation
%prod.rabbitmq-host=localhost
%prod.rabbitmq-port=5672
%prod.rabbitmq-http-port=15672
%prod.rabbitmq-username=user
%prod.rabbitmq.password=pass
%test.mp.messaging.incoming.invoices-rabbitmq.queue.name=invoices
%test.mp.messaging.incoming.invoices-rabbitmq.exchange.name=invoices

# metrics
quarkus.kubernetes.env.vars.quarkus-otel-exporter-otlp-endpoint=http://jaeger:4317

# keycloak
quarkus.oidc.application-type=service
%prod.quarkus.oidc.auth-server-url=http://keycloak-reservation:8080/realms/car-rental
quarkus.kubernetes.env.vars.quarkus-oidc-auth-server-url=http://keycloak-reservation:8080/realms/car-rental
%prod.quarkus.oidc.token-state-manager.split-tokens=true
%prod.quarkus.oidc.client-id=reservation-service